# -*- coding: utf-8 -*-
"""TD3_Half_Cheetah2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1famr5YUPeuZAJD1ESUaYAuIixIZ5o9G8

# Twin-Delayed DDPG

## Installing the packages
"""

"""## Importing the libraries"""

import os
import time
import random
import numpy as np
import matplotlib.pyplot as plt
import pybullet_envs
import gym
import torch
import torch.nn as nn
import torch.nn.functional as F
from gym import wrappers
from torch.autograd import Variable
from collections import deque

import gym_pybullet_drones
from gym_pybullet_drones import *
from gym_pybullet_drones.envs.multi_agent_rl import LeaderFollowerAviary
from gym_pybullet_drones.envs.multi_agent_rl import *
from gym_pybullet_drones.envs import *
#from gym_pybullet_drones.envs.single_agent_rl import HoverAviary

import td3
from td3 import ReplayBuffer, Actor, Critic, TD3

"""## We make a function that evaluates the policy by calculating its average reward over 10 episodes"""

def evaluate_policy(policy, eval_episodes=10):
  num_agents = 2  
  avg_reward = np.zeros(num_agents)
  for _ in range(eval_episodes):
    obs = env.reset()
    #obs_ = []
    #for i in range (len(obs)):
      #obs_.append(obs[i])
    done = False
    #actions = np.zeros(num_agents)
    while not done:
      action = policy.select_action([np.array(obs[0]),np.array(obs[1])])  
      #action = policy.select_action(np.array(obs_))
      #print("action", np.array(action))
      #action = np.array(action)
      #actions = []
      #actions.append(action[0])
      #actions.append(action[1])
      #actions = np.array(actions).flatten()
      #print("actions",actions)
      actions = {0: np.array(action[0]), 1:np.array(action[1])}
      obs, reward, done, _ = env.step(actions)
      #avg_reward += reward
      avg_reward[0] += reward[0]
      avg_reward[1] += reward[1]
  #avg_reward /= eval_episodes
  avg_reward_ = np.mean(avg_reward)
  print ("---------------------------------------")
  print ("Average Reward over the Evaluation Step: %f" % (avg_reward_))
  print ("---------------------------------------")
  return avg_reward_

"""## We set the parameters"""

#env_name = "HalfCheetahBulletEnv-v0" # Name of a environment (set it to any Continous environment you want)
env_name = "LeaderFollowerAviary"
seed = 0 # Random seed number #1e4 #5e3
start_timesteps = 1e4 # Number of iterations/timesteps before which the model randomly chooses an action, and after which it starts to use the policy network
eval_freq = 5e3 # How often the evaluation step is performed (after how many timesteps)
max_timesteps = 1000000 # Total number of iterations/timesteps
save_models = True # Boolean checker whether or not to save the pre-trained model
expl_noise = 0.1 # Exploration noise - STD value of exploration Gaussian noise
batch_size = 100 # Size of the batch
discount = 0.99 # Discount factor gamma, used in the calculation of the total discounted reward
tau = 0.005 # Target network update rate
policy_noise = 0.2 # STD of Gaussian noise added to the actions for the exploration purposes
noise_clip = 0.5 # Maximum value of the Gaussian noise added to the actions (policy)
policy_freq = 2 # Number of iterations to wait before the policy network (Actor model) is updated

"""## We create a file name for the two saved models: the Actor and Critic models"""

file_name = "%s_%s_%s" % ("TD3", env_name, str(seed))
print ("---------------------------------------")
print ("Settings: %s" % (file_name))
print ("---------------------------------------")

"""## We create a folder inside which will be saved the trained models"""

if not os.path.exists("./results"):
  os.makedirs("./results")
if save_models and not os.path.exists("./pytorch_models"):
  os.makedirs("./pytorch_models")

"""## We create the PyBullet environment"""

# Commented out IPython magic to ensure Python compatibility.

# Commented out IPython magic to ensure Python compatibility.

env = LeaderFollowerAviary()
#env = HoverAviary()
"""## We set seeds and we get the necessary information on the states and actions in the chosen environment"""

env.seed(seed)
torch.manual_seed(seed)
np.random.seed(seed)
state_dim = env.observation_space[0].shape[0]
action_dim = env.action_space[0].shape[0]
max_action = float(env.action_space[0].high[0])

"""## We create the policy network (the Actor model)"""

policy = TD3(state_dim, action_dim, max_action)

"""## We create the Experience Replay memory"""

replay_buffer = ReplayBuffer()

"""## We define a list where all the evaluation results over 10 episodes are stored"""

evaluations = [evaluate_policy(policy)]

"""## We create a new folder directory in which the final results (videos of the agent) will be populated"""

def mkdir(base, name):
    path = os.path.join(base, name)
    if not os.path.exists(path):
        os.makedirs(path)
    return path
work_dir = mkdir('exp', 'brs')
monitor_dir = mkdir(work_dir, 'monitor')
#max_episode_steps = env._max_episode_steps
max_episode_steps = 500
save_env_vid = False
if save_env_vid:
  env = wrappers.Monitor(env, monitor_dir, force = True)
  env.reset()

"""## We initialize the variables"""

total_timesteps = 0
timesteps_since_eval = 0
episode_num = 0
done = True
t0 = time.time()

"""## Training"""

# We start the main loop over 500,000 timesteps
while total_timesteps < max_timesteps:
  
  # If the episode is done
  if done:

    # If we are not at the very beginning, we start the training process of the model
    if total_timesteps != 0:
      print("Total Timesteps: {} Episode Num: {} Reward: {}".format(total_timesteps, episode_num, episode_reward))
      policy.train(replay_buffer, episode_timesteps, batch_size, discount, tau, policy_noise, noise_clip, policy_freq)

    # We evaluate the episode and we save the policy
    if timesteps_since_eval >= eval_freq:
      timesteps_since_eval %= eval_freq
      evaluations.append(evaluate_policy(policy))
      policy.save(file_name, directory="./pytorch_models")
      np.save("./results/%s" % (file_name), evaluations)
      #policy.save(file_name, directory="/content/drive/MyDrive/Colab Notebooks/pytorch_models/Multi")  ## Added by Nouran
    
    # When the training step is done, we reset the state of the environment
    obs = env.reset()
    
    # Set the Done to False
    done = False
    
    # Set rewards and episode timesteps to zero
    episode_reward = np.zeros(2)
    episode_timesteps = 0
    episode_num += 1
  
  # Before 10000 timesteps, we play random actions
  if total_timesteps < start_timesteps:
    #print("1")
    action = env.action_space.sample()
    #print("sample action", action)
  else: # After 10000 timesteps, we switch to the model
    #print("obs", np.array(obs))
    #action = policy.select_action(np.array(obs))
    #print("2")
    action = policy.select_action([np.array(obs[0]),np.array(obs[1])])
    #print("select action", action)
    #print("noise", + np.random.normal(0, expl_noise, size=env.action_space.shape))
    #a= np.array([[1,2,3],[4,5,6]])
    #print("shape", a.shape[1])
    #env2 = HoverAviary()
    #print("noise", env.action_space[0].shape[0])
    #print("low", env.action_space[0].high)
    # If the explore_noise parameter is not 0, we add noise to the action and we clip it
    if expl_noise != 0:
      action0 = []
      action1 = []
      #action0 = (action[0]).clip(env.action_space[0].low, env.action_space[0].high)
      action0 = (action[0] + np.random.normal(0, expl_noise, size=env.action_space[0].shape[0])).clip(env.action_space[0].low, env.action_space[0].high)
      action1 = (action[1] + np.random.normal(0, expl_noise, size=env.action_space[1].shape[0])).clip(env.action_space[1].low, env.action_space[1].high)
      #print("action", action0)
      #print("action", action1)
      action = [action0, action1]
      #print("action", action)
      #action = (action + np.random.normal(0, expl_noise, size=env.action_space.shape[0])).clip(env.action_space.low, env.action_space.high)
      #action[1] + np.random.normal(0, expl_noise, size=env.action_space.shape[0])).clip(env.action_space.low, env.action_space.high
  # The agent performs the action in the environment, then reaches the next state and receives the reward
  action = {0: np.array(action[0]), 1:np.array(action[1])}
  new_obs, reward, done, _ = env.step(action)
  #print("done", done)
  # We check if the episode is done
  #done_bool = 0 if episode_timesteps + 1 == env._max_episode_steps else float(done)
  #done_bool = 0 if episode_timesteps + 1 == max_episode_steps else float(all(done.values()))
  if all(done.values())==False:
      done = False
  else:
      done = True
  # We increase the total reward
  #print("reward", reward)
  #print("episode reward before", episode_reward)
  #episode_reward += reward
  episode_reward[0] += reward[0]
  episode_reward[1] += reward[1]
  #print("episode reward after", episode_reward)
  
  # We store the new transition into the Experience Replay memory (ReplayBuffer)
  replay_buffer.add((obs, new_obs, action, reward, done))

  # We update the state, the episode timestep, the total timesteps, and the timesteps since the evaluation of the policy
  obs = new_obs
  episode_timesteps += 1
  total_timesteps += 1
  timesteps_since_eval += 1

# We add the last policy evaluation to our list of evaluations and we save our model
evaluations.append(evaluate_policy(policy))
if save_models: policy.save("%s" % (file_name), directory="./pytorch_models")
np.save("./results/%s" % (file_name), evaluations)
#policy.save(file_name, directory="/content/drive/MyDrive/Colab Notebooks/pytorch_models/Multi")  ## Added by Nouran

"""## Inference"""
