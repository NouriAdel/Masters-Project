# -*- coding: utf-8 -*-
"""TD3_Half_Cheetah2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1famr5YUPeuZAJD1ESUaYAuIixIZ5o9G8

# Twin-Delayed DDPG

## Installing the packages
"""

"""## Importing the libraries"""

import os
import time
import random
import numpy as np
import matplotlib.pyplot as plt
import pybullet_envs
import gym
import torch
import torch.nn as nn
import torch.nn.functional as F
from gym import wrappers
from torch.autograd import Variable
from collections import deque

import gym_pybullet_drones
from gym_pybullet_drones import *
from gym_pybullet_drones.envs.multi_agent_rl import LeaderFollowerAviary
from gym_pybullet_drones.envs.multi_agent_rl import *
from gym_pybullet_drones.envs import *

"""## Step 1: We initialize the Experience Replay memory"""

class ReplayBuffer(object):

  def __init__(self, max_size=1e6):
    self.storage = []
    self.max_size = max_size
    self.ptr = 0

  def add(self, transition):
    if len(self.storage) == self.max_size:
      self.storage[int(self.ptr)] = transition
      self.ptr = (self.ptr + 1) % self.max_size
    else:
      self.storage.append(transition)

  def sample(self, batch_size):
    ind = np.random.randint(0, len(self.storage), size=batch_size)
    batch_states, batch_next_states, batch_actions, batch_rewards, batch_dones = [], [], [], [], []
    for i in ind: 
      state, next_state, action, reward, done = self.storage[i]
      #print("state before", reward)
      new_state = []
      new_next_state = []
      new_action = []
      new_reward = []
      state_ = list(state.items())
      next_state_ = list(next_state.items())
      action_ = list(action.items())
      reward_ = list(reward.items())
      for r in range (len(state)):
          new_state.append(state_[r][1])
          new_next_state.append(next_state_[r][1])
          new_action.append(action_[r][1])
          new_reward.append(reward_[r][1])
      #print("state after", new_reward)
      batch_states.append(np.array(new_state, copy=False))
      batch_next_states.append(np.array(new_next_state, copy=False))
      batch_actions.append(np.array(new_action, copy=False))
      batch_rewards.append(np.array(new_reward, copy=False))
      batch_dones.append(np.array(done, copy=False))
      #print("buffer", np.array(batch_dones))
    return np.array(batch_states), np.array(batch_next_states), np.array(batch_actions), np.array(batch_rewards), np.array(batch_dones).reshape(-1, 1)

"""## Step 2: We build one neural network for the Actor model and one neural network for the Actor target"""

class Actor(nn.Module):
  
  def __init__(self, state_dim, action_dim, max_action):
    super(Actor, self).__init__()
    self.layer_1 = nn.Linear(state_dim, 400)
    self.layer_2 = nn.Linear(400, 300)
    self.layer_3 = nn.Linear(300, action_dim)
    self.max_action = max_action

  def forward(self, x):
    x = F.relu(self.layer_1(x))
    x = F.relu(self.layer_2(x))
    x = self.max_action * torch.tanh(self.layer_3(x))
    return x

"""## Step 3: We build two neural networks for the two Critic models and two neural networks for the two Critic targets"""

class Critic(nn.Module):
  
  def __init__(self, state_dim, action_dim):
    super(Critic, self).__init__()
    # Defining the first Critic neural network
    self.layer_1 = nn.Linear(state_dim + action_dim, 400)
    self.layer_2 = nn.Linear(400, 300)
    self.layer_3 = nn.Linear(300, 1)
    # Defining the second Critic neural network
    self.layer_4 = nn.Linear(state_dim + action_dim, 400)
    self.layer_5 = nn.Linear(400, 300)
    self.layer_6 = nn.Linear(300, 1)

  def forward(self, x, u):
    xu = torch.cat([x, u], 1)
    # Forward-Propagation on the first Critic Neural Network
    x1 = F.relu(self.layer_1(xu))
    x1 = F.relu(self.layer_2(x1))
    x1 = self.layer_3(x1)
    # Forward-Propagation on the second Critic Neural Network
    x2 = F.relu(self.layer_4(xu))
    x2 = F.relu(self.layer_5(x2))
    x2 = self.layer_6(x2)
    return x1, x2

  def Q1(self, x, u):
    xu = torch.cat([x, u], 1)
    x1 = F.relu(self.layer_1(xu))
    x1 = F.relu(self.layer_2(x1))
    x1 = self.layer_3(x1)
    return x1

"""## Steps 4 to 15: Training Process"""

# Selecting the device (CPU or GPU)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Building the whole Training Process into a class

class TD3(object):
  
  def __init__(self, state_dim, action_dim, max_action):
    # First Agent
    self.actor1 = Actor(state_dim, action_dim, max_action).to(device)
    self.actor_target1 = Actor(state_dim, action_dim, max_action).to(device)
    self.actor_target1.load_state_dict(self.actor1.state_dict())
    self.actor1_optimizer = torch.optim.Adam(self.actor1.parameters())
    # Second Agent
    self.actor2 = Actor(state_dim, action_dim, max_action).to(device)
    self.actor_target2 = Actor(state_dim, action_dim, max_action).to(device)
    self.actor_target2.load_state_dict(self.actor2.state_dict())
    self.actor2_optimizer = torch.optim.Adam(self.actor2.parameters())
    # Central Critic
    self.critic = Critic(state_dim, action_dim).to(device)
    self.critic_target = Critic(state_dim, action_dim).to(device)
    self.critic_target.load_state_dict(self.critic.state_dict())
    self.critic_optimizer = torch.optim.Adam(self.critic.parameters())
    self.max_action = max_action

  def select_action(self, state):
    #state = torch.Tensor(state.reshape(2, -1)).to(device)
    #actions = []
    #actions.append(self.actor1(state[0]).cpu().data.numpy().flatten())
    #actions.append(self.actor2(state[1]).cpu().data.numpy().flatten())
    #return actions
    state0 = torch.Tensor(state[0].reshape(1,-1)).to(device)
    state1 = torch.Tensor(state[1].reshape(1,-1)).to(device)
    actions = []
    actions.append(self.actor1(state0).cpu().data.numpy().flatten())
    actions.append(self.actor1(state1).cpu().data.numpy().flatten())
    return actions
    

  def train(self, replay_buffer, iterations, batch_size=100, discount=0.99, tau=0.005, policy_noise=0.2, noise_clip=0.5, policy_freq=2):
    
    for it in range(iterations):
      
      # Step 4: We sample a batch of transitions (s, s’, a, r) from the memory
      batch_states, batch_next_states, batch_actions, batch_rewards, batch_dones = replay_buffer.sample(batch_size)
      state = torch.Tensor(batch_states).to(device)
      next_state = torch.Tensor(batch_next_states).to(device)
      action = torch.Tensor(batch_actions).to(device)
      reward = torch.Tensor(batch_rewards).to(device)
      #print("batch", batch_rewards)
      #print("next state", next_state[0][0])
      done = torch.Tensor(batch_dones).to(device)
      
      # Forming next states separately
      next_state1 = []
      next_state2 = []
      for s in range(0,len(next_state)):
        next_state1.append(batch_next_states[s][0])
        next_state2.append(batch_next_states[s][1])
      reward1 = np.zeros(len(reward))
      reward2 = np.zeros(len(reward))
      for r in range(0,len(reward)):
        reward1[r] = reward[r][0]
        reward2[r] = reward[r][1]
      state1 = []
      state2 = []
      for st in range(0,len(state)):
        state1.append(batch_states[st][0])
        state2.append(batch_states[st][1])
      action1 = []
      action2 = []
      for a in range(0,len(action)):
        action1.append(batch_actions[a][0])
        action2.append(batch_actions[a][1])
      #print("batch next state", batch_states)
      #print("tensor next state", state)
      #print("next state", state1)
      #print("type", type(next_state1))
      #print("list",np.array(next_state1))
      next_state1 = torch.Tensor(np.array(next_state1)).to(device)
      next_state2 = torch.Tensor(np.array(next_state2)).to(device)
      reward1 = torch.Tensor(reward1).to(device)
      reward2 = torch.Tensor(reward2).to(device)
      state1 = torch.Tensor(np.array(state1)).to(device)
      state2 = torch.Tensor(np.array(state2)).to(device)
      action1 = torch.Tensor(np.array(action1)).to(device)
      action2 = torch.Tensor(np.array(action2)).to(device)
      # Step 5: From the next state s’, the Actor target plays the next action a’
      # First Agent
      next_action1 = self.actor_target1(next_state1)
      # Second Agent
      next_action2 = self.actor_target2(next_state2)
      
      # Step 6: We add Gaussian noise to this next action a’ and we clamp it in a range of values supported by the environment
      #noise = torch.Tensor(batch_actions).data.normal_(0, policy_noise).to(device)
      noise1 = torch.Tensor(action1).data.normal_(0, policy_noise).to(device)
      noise2 = torch.Tensor(action2).data.normal_(0, policy_noise).to(device)
      #print("noise", noise)
      #noise = noise.clamp(-noise_clip, noise_clip)
      noise1 = noise1.clamp(-noise_clip, noise_clip)
      noise2 = noise2.clamp(-noise_clip, noise_clip)
      next_action1 = (next_action1 + noise1).clamp(-self.max_action, self.max_action)
      next_action2 = (next_action2 + noise2).clamp(-self.max_action, self.max_action)
      
      # First Agent
      # Step 7: The two Critic targets take each the couple (s’, a’) as input and return two Q-values Qt1(s’,a’) and Qt2(s’,a’) as outputs
      target1_Q1, target1_Q2 = self.critic_target(next_state1, next_action1)
      
      # Step 8: We keep the minimum of these two Q-values: min(Qt1, Qt2)
      target1_Q = torch.min(target1_Q1, target1_Q2)
      
      # Step 9: We get the final target of the two Critic models, which is: Qt = r + γ * min(Qt1, Qt2), where γ is the discount factor
      target1_Q = reward1 + ((1 - done) * discount * target1_Q).detach()
      
      # Step 10: The two Critic models take each the couple (s, a) as input and return two Q-values Q1(s,a) and Q2(s,a) as outputs
      current1_Q1, current1_Q2 = self.critic(state1, action1)
      
      # Step 11: We compute the loss coming from the two Critic models: Critic Loss = MSE_Loss(Q1(s,a), Qt) + MSE_Loss(Q2(s,a), Qt)
      critic_loss1 = F.mse_loss(current1_Q1, target1_Q) + F.mse_loss(current1_Q2, target1_Q)
      
      # Step 12: We backpropagate this Critic loss and update the parameters of the two Critic models with a SGD optimizer
      self.critic_optimizer.zero_grad()
      critic_loss1.backward()
      self.critic_optimizer.step()
      
      # Step 13: Once every two iterations, we update our Actor model by performing gradient ascent on the output of the first Critic model
      if it % policy_freq == 0:
        actor_loss1 = -self.critic.Q1(state1, self.actor1(state1)).mean()
        self.actor1_optimizer.zero_grad()
        actor_loss1.backward()
        self.actor1_optimizer.step()
        
        # Step 14: Still once every two iterations, we update the weights of the Actor target by polyak averaging
        for param, target_param in zip(self.actor1.parameters(), self.actor_target1.parameters()):
          target_param.data.copy_(tau * param.data + (1 - tau) * target_param.data)
        
        # Step 15: Still once every two iterations, we update the weights of the Critic target by polyak averaging
        for param, target_param in zip(self.critic.parameters(), self.critic_target.parameters()):
          target_param.data.copy_(tau * param.data + (1 - tau) * target_param.data)

      # Second Agent
      # Step 7: The two Critic targets take each the couple (s’, a’) as input and return two Q-values Qt1(s’,a’) and Qt2(s’,a’) as outputs
      target2_Q1, target2_Q2 = self.critic_target(next_state2, next_action2)
      
      # Step 8: We keep the minimum of these two Q-values: min(Qt1, Qt2)
      target2_Q = torch.min(target2_Q1, target2_Q2)
      
      # Step 9: We get the final target of the two Critic models, which is: Qt = r + γ * min(Qt1, Qt2), where γ is the discount factor
      target2_Q = reward2 + ((1 - done) * discount * target2_Q).detach()
      
      # Step 10: The two Critic models take each the couple (s, a) as input and return two Q-values Q1(s,a) and Q2(s,a) as outputs
      current2_Q1, current2_Q2 = self.critic(state2, action2)
      
      # Step 11: We compute the loss coming from the two Critic models: Critic Loss = MSE_Loss(Q1(s,a), Qt) + MSE_Loss(Q2(s,a), Qt)
      critic_loss2 = F.mse_loss(current2_Q1, target2_Q) + F.mse_loss(current2_Q2, target2_Q)
      
      # Step 12: We backpropagate this Critic loss and update the parameters of the two Critic models with a SGD optimizer
      self.critic_optimizer.zero_grad()
      critic_loss2.backward()
      self.critic_optimizer.step()
      
      # Step 13: Once every two iterations, we update our Actor model by performing gradient ascent on the output of the first Critic model
      if it % policy_freq == 0:
        actor_loss2 = -self.critic.Q1(state2, self.actor2(state2)).mean()
        self.actor2_optimizer.zero_grad()
        actor_loss2.backward()
        self.actor2_optimizer.step()
        
        # Step 14: Still once every two iterations, we update the weights of the Actor target by polyak averaging
        for param, target_param in zip(self.actor2.parameters(), self.actor_target2.parameters()):
          target_param.data.copy_(tau * param.data + (1 - tau) * target_param.data)
        
        # Step 15: Still once every two iterations, we update the weights of the Critic target by polyak averaging
        for param, target_param in zip(self.critic.parameters(), self.critic_target.parameters()):
          target_param.data.copy_(tau * param.data + (1 - tau) * target_param.data)

  # Making a save method to save a trained model
  def save(self, filename, directory):
    torch.save(self.actor1.state_dict(), '%s/%s_actor1.pth' % (directory, filename))
    torch.save(self.actor2.state_dict(), '%s/%s_actor2.pth' % (directory, filename))
    torch.save(self.critic.state_dict(), '%s/%s_critic.pth' % (directory, filename))
  
  # Making a load method to load a pre-trained model
  def load(self, filename, directory):
    self.actor1.load_state_dict(torch.load('%s/%s_actor1.pth' % (directory, filename)))
    self.actor2.load_state_dict(torch.load('%s/%s_actor2.pth' % (directory, filename)))
    self.critic.load_state_dict(torch.load('%s/%s_critic.pth' % (directory, filename)))

"""## We make a function that evaluates the policy by calculating its average reward over 10 episodes"""

def evaluate_policy(policy, eval_episodes=10):
  num_agents = 2  
  avg_reward = np.zeros(num_agents)
  for _ in range(eval_episodes):
    obs = env.reset()
    #obs_ = []
    #for i in range (len(obs)):
      #obs_.append(obs[i])
    done = False
    #actions = np.zeros(num_agents)
    while not done:
      action = policy.select_action([np.array(obs[0]),np.array(obs[1])])  
      #action = policy.select_action(np.array(obs_))
      #print("action", np.array(action))
      #action = np.array(action)
      #actions = []
      #actions.append(action[0])
      #actions.append(action[1])
      #actions = np.array(actions).flatten()
      #print("actions",actions)
      actions = {0: np.array(action[0]), 1:np.array(action[1])}
      obs, reward, done, _ = env.step(actions)
      #avg_reward += reward
      avg_reward[0] += reward[0]
      avg_reward[1] += reward[1]
  #avg_reward /= eval_episodes
  avg_reward_ = np.mean(avg_reward)
  print ("---------------------------------------")
  print ("Average Reward over the Evaluation Step: %f" % (avg_reward_))
  print ("---------------------------------------")
  return avg_reward_

"""## We set the parameters"""

#env_name = "HalfCheetahBulletEnv-v0" # Name of a environment (set it to any Continous environment you want)
env_name = "LeaderFollowerAviary"
seed = 0 # Random seed number
start_timesteps = 1e4 # Number of iterations/timesteps before which the model randomly chooses an action, and after which it starts to use the policy network
eval_freq = 5e3 # How often the evaluation step is performed (after how many timesteps)
max_timesteps = 1000 # Total number of iterations/timesteps
save_models = True # Boolean checker whether or not to save the pre-trained model
expl_noise = 0.1 # Exploration noise - STD value of exploration Gaussian noise
batch_size = 100 # Size of the batch
discount = 0.99 # Discount factor gamma, used in the calculation of the total discounted reward
tau = 0.005 # Target network update rate
policy_noise = 0.2 # STD of Gaussian noise added to the actions for the exploration purposes
noise_clip = 0.5 # Maximum value of the Gaussian noise added to the actions (policy)
policy_freq = 2 # Number of iterations to wait before the policy network (Actor model) is updated

"""## We create a file name for the two saved models: the Actor and Critic models"""

file_name = "%s_%s_%s" % ("TD3", env_name, str(seed))
print ("---------------------------------------")
print ("Settings: %s" % (file_name))
print ("---------------------------------------")

"""## We create a folder inside which will be saved the trained models"""

if not os.path.exists("./results"):
  os.makedirs("./results")
if save_models and not os.path.exists("./pytorch_models"):
  os.makedirs("./pytorch_models")

"""## We create the PyBullet environment"""

# Commented out IPython magic to ensure Python compatibility.

# Commented out IPython magic to ensure Python compatibility.

env = LeaderFollowerAviary()

"""## We set seeds and we get the necessary information on the states and actions in the chosen environment"""

env.seed(seed)
torch.manual_seed(seed)
np.random.seed(seed)
state_dim = env.observation_space[0].shape[0]
action_dim = env.action_space[0].shape[0]
max_action = float(env.action_space[0].high[0])

"""## We create the policy network (the Actor model)"""

policy = TD3(state_dim, action_dim, max_action)

"""## We create the Experience Replay memory"""

replay_buffer = ReplayBuffer()

"""## We define a list where all the evaluation results over 10 episodes are stored"""

evaluations = [evaluate_policy(policy)]

"""## We create a new folder directory in which the final results (videos of the agent) will be populated"""

def mkdir(base, name):
    path = os.path.join(base, name)
    if not os.path.exists(path):
        os.makedirs(path)
    return path
work_dir = mkdir('exp', 'brs')
monitor_dir = mkdir(work_dir, 'monitor')
#max_episode_steps = env._max_episode_steps
max_episode_steps = 500
save_env_vid = False
if save_env_vid:
  env = wrappers.Monitor(env, monitor_dir, force = True)
  env.reset()

"""## We initialize the variables"""

total_timesteps = 0
timesteps_since_eval = 0
episode_num = 0
done = True
t0 = time.time()

"""## Training"""

# We start the main loop over 500,000 timesteps
while total_timesteps < max_timesteps:
  
  # If the episode is done
  if done:

    # If we are not at the very beginning, we start the training process of the model
    if total_timesteps != 0:
      print("Total Timesteps: {} Episode Num: {} Reward: {}".format(total_timesteps, episode_num, episode_reward))
      policy.train(replay_buffer, episode_timesteps, batch_size, discount, tau, policy_noise, noise_clip, policy_freq)

    # We evaluate the episode and we save the policy
    if timesteps_since_eval >= eval_freq:
      timesteps_since_eval %= eval_freq
      evaluations.append(evaluate_policy(policy))
      policy.save(file_name, directory="./pytorch_models")
      np.save("./results/%s" % (file_name), evaluations)
      policy.save(file_name, directory="/content/drive/MyDrive/Colab Notebooks/pytorch_models/Multi")  ## Added by Nouran
    
    # When the training step is done, we reset the state of the environment
    obs = env.reset()
    
    # Set the Done to False
    done = False
    
    # Set rewards and episode timesteps to zero
    episode_reward = []
    episode_timesteps = 0
    episode_num += 1
  
  # Before 10000 timesteps, we play random actions
  if total_timesteps < start_timesteps:
    action = env.action_space.sample()
  else: # After 10000 timesteps, we switch to the model
    action = policy.select_action(np.array(obs))
    # If the explore_noise parameter is not 0, we add noise to the action and we clip it
    if expl_noise != 0:
      action = (action + np.random.normal(0, expl_noise, size=env.action_space.shape[0])).clip(env.action_space.low, env.action_space.high)
  
  # The agent performs the action in the environment, then reaches the next state and receives the reward
  new_obs, reward, done, _ = env.step(action)
  
  # We check if the episode is done
  #done_bool = 0 if episode_timesteps + 1 == env._max_episode_steps else float(done)
  done_bool = 0 if episode_timesteps + 1 == max_episode_steps else float(all(done.values()))
  
  # We increase the total reward
  episode_reward += reward
  
  # We store the new transition into the Experience Replay memory (ReplayBuffer)
  replay_buffer.add((obs, new_obs, action, reward, done_bool))

  # We update the state, the episode timestep, the total timesteps, and the timesteps since the evaluation of the policy
  obs = new_obs
  episode_timesteps += 1
  total_timesteps += 1
  timesteps_since_eval += 1

# We add the last policy evaluation to our list of evaluations and we save our model
evaluations.append(evaluate_policy(policy))
if save_models: policy.save("%s" % (file_name), directory="./pytorch_models")
np.save("./results/%s" % (file_name), evaluations)
policy.save(file_name, directory="/content/drive/MyDrive/Colab Notebooks/pytorch_models/Multi")  ## Added by Nouran

"""## Inference"""
